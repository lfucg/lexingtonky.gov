<?php

/**
 * @file
 * Contains lex_custom.module.
 */

use Drupal\Core\Batch\BatchBuilder;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function lex_custom_theme() {
  return [
    'fa_link_formatter' => [
      'variables' => [
        'url' => NULL,
        'title' => NULL,
        'options' => NULL,
      ],
      'template' => 'fa-link-formatter',
    ],
    'gtranslate' => [
      'variables' => [
        'gtranslate_html' => NULL
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function lex_custom_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $form['field_keywords']['widget']['add_more']['#value'] = t('Add Another Keyword');

  if ($form_id == 'contact_message_page_feedback_form') {
    // Setting default value client side to avoid caching.
    $form['#attached']['library'][] = 'lex/set-default-url';
  }
}

/**
 * Implements hook_views_pre_view().
 */
function lex_custom_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if (!is_null($node)) {
    switch ($view->id()) {
      case 'alert_banner':
        if (
          $display_id == 'block_alert_banner_contextual' &&
          $node->bundle() == (
            'board_commission' ||
            'meeting' ||
            'page' ||
            'organization_page' ||
            'news_article' ||
            'event'
          )
        ) {
          $args[0] = $node->id();
        }
        break;

    }
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function lex_custom_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  // Append the current page title to the breadcrumb for non-admin routes.
  if ($breadcrumb && !\Drupal::service('router.admin_context')->isAdminRoute()) {
    $title = \Drupal::service('title_resolver')->getTitle(\Drupal::request(), $route_match->getRouteObject());
    if (!empty($title)) {
      $breadcrumb->addLink(Link::createFromRoute($title, '<none>'));
    }
  }
}

/**
 * Implements hook_permission().
 */
function lex_custom_permission() {
  return array(
    'gtranslate settings' => array(
      'title' => t('Manage GTranslate settings'),
    ),
  );
}

/**
 * Implements hook_update_N().
 */
function lex_custom_update_9401() {
  // https://www.drupal.org/node/3034742.
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type_manager->clearCachedDefinitions();

  $entity_type_ids = [];
  $change_summary = \Drupal::service('entity.definition_update_manager')->getChangeSummary();
  foreach ($change_summary as $entity_type_id => $change_list) {
    $entity_type = $entity_type_manager->getDefinition($entity_type_id);
    \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
    $entity_type_ids[] = $entity_type_id;
  }

  return t("Installed/Updated the entity type(s): @entity_type_ids", [
    '@entity_type_ids' => implode(', ', $entity_type_ids),
  ]);
}

/**
 * Create moderation_state column for taxonomy terms.
 */
function lex_custom_update_9402() {
  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Moderation state'))
    ->setDescription(t('Moderation state'));

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('moderation_state', 'taxonomy_term', 'workbench_moderation', $field_storage_definition);
}

/**
 * Delete all news items prior to 2021 from database.
 */
function lex_custom_update_9503(&$sandbox) {
  return _delete_entities_prior_to_date('node', 'news_article', '2021-01-01', $sandbox);
}

/**
 * Delete all final order items prior to 2019 from database.
 */
function lex_custom_update_9504(&$sandbox) {
  return _delete_entities_prior_to_date('node', 'final_order', '2019-01-01', $sandbox);
}

/**
 * Delete all meeting items prior to 2021 from database.
 */
function lex_custom_update_9505(&$sandbox) {
  return _delete_entities_prior_to_date('node', 'meeting', '2021-01-01', $sandbox);
}

/**
 * Delete all event items prior to 2021 from database.
 */
function lex_custom_update_9506(&$sandbox) {
  return _delete_entities_prior_to_date('node', 'event', '2021-01-01', $sandbox);
}


/**
 * Reusable delete function of all entity types.
 *
 * @param string $entity_type_id  The entity type id. I.e 'node', 'taxonomy_term'
 * @param string $bundle Entity bundle id. I.e. 'page', 'news_article'.
 * @param string $published_date Format YYYY-MM-DD
 * 
 * @return void
 */ 
function _delete_entities_prior_to_date($entity_type_id, $bundle, $published_date, $sandbox) {
  $entity_type_manager = \Drupal::entityTypeManager();
  $date_limit = strtotime($published_date);

  $entity_storage = $entity_type_manager->getStorage($entity_type_id);
  $query = $entity_storage->getQuery()
    ->accessCheck(TRUE)
    ->condition("type", $bundle)
    ->condition("created", $date_limit, "<");
  $entity_ids = $query->execute();

  if (empty($entity_ids)) {
    $messenger = \Drupal::messenger();
    $messenger->addStatus("No items found to delete.");
    return t("All {$bundle} prior to {$published_date} have ALREADY been deleted.");
  }

  if (!isset($sandbox["progress"])) {
    // This must be the first run. Initialize the sandbox.
    $sandbox["progress"] = 0;
    $sandbox["current_pk"] = 0;
    $sandbox["max"] = count($entity_ids);
  }

  $entities = $entity_storage->loadMultiple($entity_ids);
  foreach ($entities as $entity) {
    $id = $entity->id();
    $entity->delete();
    $sandbox["progress"]++;
    $sandbox["current_node"] = $id;
  }
  $sandbox["#finished"] = empty($sandbox["max"]) ? 1 : $sandbox["progress"] / $sandbox["max"];
  return t("All {$bundle} prior to {$published_date} have been deleted.");
}

/**
 * Implements hook_scheduler_publish_action().
 * Taken directly from comments on scheduler module:
 * https://www.drupal.org/project/scheduler/issues/2977887#comment-14541704
 * 
 */
function lex_custom_scheduler_publish_action(NodeInterface $node) {
  /** @var \Drupal\workbench_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = \Drupal::service('workbench_moderation.moderation_information');
  if ($moderation_info->isModeratableEntity($node)) {
    $node->set('moderation_state', 'published');
    $node->save();
  }
}

/**
 * Implements hook_scheduler_unpublish_action().
 * Taken directly from comments on scheduler module:
 * https://www.drupal.org/project/scheduler/issues/2977887#comment-14541704
 * 
 */
function lex_custom_scheduler_unpublish_action(NodeInterface $node) {
  /** @var \Drupal\workbench_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = \Drupal::service('workbench_moderation.moderation_information');
  if ($moderation_info->isModeratableEntity($node)) {
    $node->set('moderation_state', 'archived');
    $node->save();
  }
}
