<?php

/**
 * @file
 * Honeypot module, for deterring spam bots from completing Drupal forms.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\honeypot\Event\HoneypotRejectEvent;

/**
 * Implements hook_help().
 */
function honeypot_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.honeypot':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Honeypot module uses both the honeypot and timestamp methods of deterring spam bots from completing forms on your Drupal site. These methods are effective against many spam bots, and are not as intrusive as CAPTCHAs or other methods which punish the user. For more information, see the <a href=":url">online documentation for the Honeypot module</a>.', [':url' => 'https://www.drupal.org/docs/contributed-modules/honeypot']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configuring Honeypot') . '</dt>';
      $output .= '<dd>' . t('All settings for this module are on the Honeypot configuration page, under the Configuration section, in the Content authoring settings. You can visit the configuration page directly from the Honeypot configuration link below. The configuration settings are described in the <a href=":url">online documentation for the Honeypot module</a>.', [':url' => 'https://www.drupal.org/docs/contributed-modules/honeypot/using-honeypot']) . '</dd>';
      $output .= '<dt>' . t('Setting up Honeypot in your own forms') . '</dt>';
      $output .= '<dd>' . t("Honeypot protection can be bypassed for certain user roles. For instance, site administrators, who just might be able to fill out a form in less than 5 seconds. And, Honeypot protection can be enabled only for certain forms. Or, it can protect all forms on the site. Finally, honeypot protection can be used in any of your own forms by simply including a little code snippet included on the module's project page.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_cron().
 */
function honeypot_cron() {
  // Delete {honeypot_user} entries older than the value of 'expire'.
  $expire_limit = \Drupal::config('honeypot.settings')->get('expire');
  \Drupal::database()->delete('honeypot_user')
    ->condition('timestamp', \Drupal::time()->getRequestTime() - $expire_limit, '<')
    ->execute();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function honeypot_form_system_performance_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  // If time-based protection is effectively disabled, no need for a warning.
  if (\Drupal::config('honeypot.settings')->get('time_limit') === 0) {
    return;
  }

  // Add a warning about caching on the Performance settings page.
  $description = '';
  if (!empty($form['caching']['page_cache_maximum_age']['#description'])) {
    // If there's existing description on 'caching' field, append a break to it
    // so that our verbiage is on its own line.
    $description .= $form['caching']['page_cache_maximum_age']['#description'] . '<br />';
  }

  $description .= t('<em>Page caching may be disabled on any pages where a form is present due to the <a href=":url">Honeypot module\'s configuration</a>.</em>', [
    ':url' => Url::fromRoute('honeypot.config')->toString(),
  ]);

  $form['caching']['page_cache_maximum_age']['#description'] = $description;
}

/**
 * Implements hook_form_alter().
 *
 * Adds Honeypot features to forms enabled in the Honeypot admin interface.
 */
function honeypot_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Don't use for maintenance mode forms (install, update, etc.).
  if (defined('MAINTENANCE_MODE')) {
    return;
  }

  // Add a tag to all forms, so that if they are cached and honeypot
  // configuration is changed, the cached forms are invalidated and honeypot
  // protection can be re-evaluated.
  $form['#cache']['tags'][] = 'config:honeypot.settings';

  // Get list of unprotected forms and setting for whether to protect all forms.
  $unprotected_forms = \Drupal::config('honeypot.settings')->get('unprotected_forms');
  $protect_all_forms = \Drupal::config('honeypot.settings')->get('protect_all_forms');

  // If configured to protect all forms, add protection to every form.
  if ($protect_all_forms && !in_array($form_id, $unprotected_forms)) {
    // Don't protect system forms - only admins should have access, and system
    // forms may be programmatically submitted by drush and other modules.
    if (preg_match('/[^a-zA-Z]system_/', $form_id) === 0 && preg_match('/[^a-zA-Z]search_/', $form_id) === 0 && preg_match('/[^a-zA-Z]views_exposed_form_/', $form_id) === 0) {
      \Drupal::service('honeypot')->addFormProtection($form, $form_state, ['honeypot', 'time_restriction']);
    }
  }
  // Otherwise add form protection only to the admin-configured forms.
  elseif (in_array($form_id, \Drupal::service('honeypot')->getProtectedForms())) {
    // The $form_id of the form we're currently altering is found
    // in the list of protected forms.
    \Drupal::service('honeypot')->addFormProtection($form, $form_state, ['honeypot', 'time_restriction']);
  }
}

/**
 * Builds an array of all the protected forms on the site.
 *
 * @return array
 *   An array whose values are the form_ids of all the protected forms
 *   on the site.
 *
 * @deprecated in honeypot:2.1.0 and is removed from honeypot:3.0.0. Use the
 *   'honeypot' service instead. For example, \Drupal::service('honeypot')
 *   ->getProtectedForms().
 *
 * @see https://www.drupal.org/node/2949447
 */
function honeypot_get_protected_forms() {
  @trigger_error("honeypot_get_protected_forms() is deprecated in honeypot:2.1.0 and is removed from honeypot:3.0.0. Use the 'honeypot' service instead. For example, \Drupal::service('honeypot')->getProtectedForms(). See https://www.drupal.org/node/2949447", E_USER_DEPRECATED);
  return \Drupal::service('honeypot')->getProtectedForms();
}

/**
 * Form builder function to add different types of protection to forms.
 *
 * @param array $options
 *   (optional) Array of options to be added to form. Currently accepts
 *   'honeypot' and 'time_restriction'.
 *
 * @deprecated in honeypot:2.1.0 and is removed from honeypot:3.0.0. Use the
 *   'honeypot' service instead. For example, \Drupal::service('honeypot')
 *   ->addFormProtection($form, $form_state, $options).
 *
 * @see https://www.drupal.org/node/2949447
 */
function honeypot_add_form_protection(&$form, FormStateInterface $form_state, array $options = []) {
  @trigger_error("honeypot_add_form_protection() is deprecated in honeypot:2.1.0 and is removed from honeypot:3.0.0. Use the 'honeypot' service instead. For example, \Drupal::service('honeypot')->addFormProtection(\$form, \$form_state, \$options). See https://www.drupal.org/node/2949447", E_USER_DEPRECATED);
  \Drupal::service('honeypot')->addFormProtection($form, $form_state, $options);
}

/**
 * Looks up the time limit for the current user.
 *
 * @param array $form_values
 *   (optional) Array of form values.
 *
 * @return int
 *   The time limit in seconds.
 *
 * @deprecated in honeypot:2.1.0 and is removed from honeypot:3.0.0. Use the
 *   'honeypot' service instead. For example, \Drupal::service('honeypot')
 *   ->getTimeLimit($form_values).
 *
 * @see https://www.drupal.org/node/2949447
 */
function honeypot_get_time_limit(array $form_values = []) {
  @trigger_error("honeypot_get_time_limit() is deprecated in honeypot:2.1.0 and is removed from honeypot:3.0.0. Use the 'honeypot' service instead. For example, \Drupal::service('honeypot')->getTimeLimit(\$form_values). See https://www.drupal.org/node/2949447", E_USER_DEPRECATED);
  return \Drupal::service('honeypot')->getTimeLimit($form_values);
}

/**
 * Logs the failed submission with timestamp and hostname.
 *
 * @param string $form_id
 *   Form ID for the rejected form submission.
 * @param string $type
 *   String indicating the reason the submission was blocked. Allowed values:
 *   - honeypot: If honeypot field was filled in.
 *   - honeypot_time: If form was completed before the configured time limit.
 *
 * @deprecated in honeypot:2.1.0 and is removed from honeypot:3.0.0. Use the
 *   'honeypot' service instead. For example, \Drupal::service('honeypot')
 *   ->logFailure($form_id, $type).
 *
 * @see https://www.drupal.org/node/2949447
 */
function honeypot_log_failure($form_id, $type) {
  @trigger_error("honeypot_log_failure() is deprecated in honeypot:2.1.0 and is removed from honeypot:3.0.0. Use the 'honeypot' service instead. For example, \Drupal::service('honeypot')->logFailure(\$form_id, \$type). See https://www.drupal.org/node/2949447", E_USER_DEPRECATED);
  \Drupal::service('honeypot')->logFailure($form_id, $type);
}

/**
 * Implements hook_honeypot_reject().
 *
 * Generates an event when a form submission is rejected.
 *
 * @todo Only accepts two args - see above.
 */
function honeypot_honeypot_reject($form_id, $uid, $type) {
  $event = new HoneypotRejectEvent($form_id, $uid, $type);
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($event, $event::EVENT_NAME);
}
